<script>
	/*
 * Swipe 2.0
 *
 * Brad Birdsall
 * Copyright 2013, MIT License
 *
*/

function Swipe(container, options) {

  "use strict";

  // utilities
  var noop = function() {}; // simple no operation function
  var offloadFn = function(fn) { setTimeout(fn || noop, 0) }; // offload a functions execution

  // check browser capabilities
  var browser = {
    addEventListener: !!window.addEventListener,
    touch: ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch,
    transitions: (function(temp) {
      var props = ['transitionProperty', 'WebkitTransition', 'MozTransition', 'OTransition', 'msTransition'];
      for ( var i in props ) if (temp.style[ props[i] ] !== undefined) return true;
      return false;
    })(document.createElement('swipe'))
  };

  // quit if no root element
  if (!container) return;
  var element = container.children[0];
  var slides, slidePos, width, length;
  options = options || {};
  var index = parseInt(options.startSlide, 10) || 0;
  var speed = options.speed || 300;
  options.continuous = options.continuous !== undefined ? options.continuous : true;

  function setup() {

    // cache slides
    slides = element.children;
    length = slides.length;

    // set continuous to false if only one slide
    if (slides.length < 2) options.continuous = false;

    //special case if two slides
    if (browser.transitions && options.continuous && slides.length < 3) {
      element.appendChild(slides[0].cloneNode(true));
      element.appendChild(element.children[1].cloneNode(true));
      slides = element.children;
    }

    // create an array to store current positions of each slide
    slidePos = new Array(slides.length);

    // determine width of each slide
    width = container.getBoundingClientRect().width || container.offsetWidth;

    element.style.width = (slides.length * width) + 'px';

    // stack elements
    var pos = slides.length;
    while(pos--) {

      var slide = slides[pos];

      slide.style.width = width + 'px';
      slide.setAttribute('data-index', pos);

      if (browser.transitions) {
        slide.style.left = (pos * -width) + 'px';
        move(pos, index > pos ? -width : (index < pos ? width : 0), 0);
      }

    }

    // reposition elements before and after index
    if (options.continuous && browser.transitions) {
      move(circle(index-1), -width, 0);
      move(circle(index+1), width, 0);
    }

    if (!browser.transitions) element.style.left = (index * -width) + 'px';

    container.style.visibility = 'visible';

  }

  function prev() {

    if (options.continuous) slide(index-1);
    else if (index) slide(index-1);

  }

  function next() {

    if (options.continuous) slide(index+1);
    else if (index < slides.length - 1) slide(index+1);

  }

  function circle(index) {

    // a simple positive modulo using slides.length
    return (slides.length + (index % slides.length)) % slides.length;

  }

  function slide(to, slideSpeed) {

    // do nothing if already on requested slide
    if (index == to) return;

    if (browser.transitions) {

      var direction = Math.abs(index-to) / (index-to); // 1: backward, -1: forward

      // get the actual position of the slide
      if (options.continuous) {
        var natural_direction = direction;
        direction = -slidePos[circle(to)] / width;

        // if going forward but to < index, use to = slides.length + to
        // if going backward but to > index, use to = -slides.length + to
        if (direction !== natural_direction) to =  -direction * slides.length + to;

      }

      var diff = Math.abs(index-to) - 1;

      // move all the slides between index and to in the right direction
      while (diff--) move( circle((to > index ? to : index) - diff - 1), width * direction, 0);

      to = circle(to);

      move(index, width * direction, slideSpeed || speed);
      move(to, 0, slideSpeed || speed);

      if (options.continuous) move(circle(to - direction), -(width * direction), 0); // we need to get the next in place

    } else {

      to = circle(to);
      animate(index * -width, to * -width, slideSpeed || speed);
      //no fallback for a circular continuous if the browser does not accept transitions
    }

    index = to;
    offloadFn(options.callback && options.callback(index, slides[index]));
  }

  function move(index, dist, speed) {

    translate(index, dist, speed);
    slidePos[index] = dist;

  }

  function translate(index, dist, speed) {

    var slide = slides[index];
    var style = slide && slide.style;

    if (!style) return;

    style.webkitTransitionDuration =
    style.MozTransitionDuration =
    style.msTransitionDuration =
    style.OTransitionDuration =
    style.transitionDuration = speed + 'ms';

    style.webkitTransform = 'translate(' + dist + 'px,0)' + 'translateZ(0)';
    style.msTransform =
    style.MozTransform =
    style.OTransform = 'translateX(' + dist + 'px)';

  }

  function animate(from, to, speed) {

    // if not an animation, just reposition
    if (!speed) {

      element.style.left = to + 'px';
      return;

    }

    var start = +new Date;

    var timer = setInterval(function() {

      var timeElap = +new Date - start;

      if (timeElap > speed) {

        element.style.left = to + 'px';

        if (delay) begin();

        options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);

        clearInterval(timer);
        return;

      }

      element.style.left = (( (to - from) * (Math.floor((timeElap / speed) * 100) / 100) ) + from) + 'px';

    }, 4);

  }

  // setup auto slideshow
  var delay = options.auto || 0;
  var interval;

  function begin() {

    interval = setTimeout(next, delay);

  }

  function stop() {

    delay = 0;
    clearTimeout(interval);

  }


  // setup initial vars
  var start = {};
  var delta = {};
  var isScrolling;

  // setup event capturing
  var events = {

    handleEvent: function(event) {

      switch (event.type) {
        case 'touchstart': this.start(event); break;
        case 'touchmove': this.move(event); break;
        case 'touchend': offloadFn(this.end(event)); break;
        case 'webkitTransitionEnd':
        case 'msTransitionEnd':
        case 'oTransitionEnd':
        case 'otransitionend':
        case 'transitionend': offloadFn(this.transitionEnd(event)); break;
        case 'resize': offloadFn(setup); break;
      }

      if (options.stopPropagation) event.stopPropagation();

    },
    start: function(event) {

      var touches = event.touches[0];

      // measure start values
      start = {

        // get initial touch coords
        x: touches.pageX,
        y: touches.pageY,

        // store time to determine touch duration
        time: +new Date

      };

      // used for testing first move event
      isScrolling = undefined;

      // reset delta and end measurements
      delta = {};

      // attach touchmove and touchend listeners
      element.addEventListener('touchmove', this, false);
      element.addEventListener('touchend', this, false);

    },
    move: function(event) {

      // ensure swiping with one touch and not pinching
      if ( event.touches.length > 1 || event.scale && event.scale !== 1) return

      if (options.disableScroll) event.preventDefault();

      var touches = event.touches[0];

      // measure change in x and y
      delta = {
        x: touches.pageX - start.x,
        y: touches.pageY - start.y
      }

      // determine if scrolling test has run - one time test
      if ( typeof isScrolling == 'undefined') {
        isScrolling = !!( isScrolling || Math.abs(delta.x) < Math.abs(delta.y) );
      }

      // if user is not trying to scroll vertically
      if (!isScrolling) {

        // prevent native scrolling
        event.preventDefault();

        // stop slideshow
        stop();

        // increase resistance if first or last slide
        if (options.continuous) { // we don't add resistance at the end

          translate(circle(index-1), delta.x + slidePos[circle(index-1)], 0);
          translate(index, delta.x + slidePos[index], 0);
          translate(circle(index+1), delta.x + slidePos[circle(index+1)], 0);

        } else {

          delta.x =
            delta.x /
              ( (!index && delta.x > 0               // if first slide and sliding left
                || index == slides.length - 1        // or if last slide and sliding right
                && delta.x < 0                       // and if sliding at all
              ) ?
              ( Math.abs(delta.x) / width + 1 )      // determine resistance level
              : 1 );                                 // no resistance if false

          // translate 1:1
          translate(index-1, delta.x + slidePos[index-1], 0);
          translate(index, delta.x + slidePos[index], 0);
          translate(index+1, delta.x + slidePos[index+1], 0);
        }

      }

    },
    end: function(event) {

      // measure duration
      var duration = +new Date - start.time;

      // determine if slide attempt triggers next/prev slide
      var isValidSlide =
            Number(duration) < 250               // if slide duration is less than 250ms
            && Math.abs(delta.x) > 20            // and if slide amt is greater than 20px
            || Math.abs(delta.x) > width/2;      // or if slide amt is greater than half the width

      // determine if slide attempt is past start and end
      var isPastBounds =
            !index && delta.x > 0                            // if first slide and slide amt is greater than 0
            || index == slides.length - 1 && delta.x < 0;    // or if last slide and slide amt is less than 0

      if (options.continuous) isPastBounds = false;

      // determine direction of swipe (true:right, false:left)
      var direction = delta.x < 0;

      // if not scrolling vertically
      if (!isScrolling) {

        if (isValidSlide && !isPastBounds) {

          if (direction) {

            if (options.continuous) { // we need to get the next in this direction in place

              move(circle(index-1), -width, 0);
              move(circle(index+2), width, 0);

            } else {
              move(index-1, -width, 0);
            }

            move(index, slidePos[index]-width, speed);
            move(circle(index+1), slidePos[circle(index+1)]-width, speed);
            index = circle(index+1);

          } else {
            if (options.continuous) { // we need to get the next in this direction in place

              move(circle(index+1), width, 0);
              move(circle(index-2), -width, 0);

            } else {
              move(index+1, width, 0);
            }

            move(index, slidePos[index]+width, speed);
            move(circle(index-1), slidePos[circle(index-1)]+width, speed);
            index = circle(index-1);

          }

          options.callback && options.callback(index, slides[index]);

        } else {

          if (options.continuous) {

            move(circle(index-1), -width, speed);
            move(index, 0, speed);
            move(circle(index+1), width, speed);

          } else {

            move(index-1, -width, speed);
            move(index, 0, speed);
            move(index+1, width, speed);
          }

        }

      }

      // kill touchmove and touchend event listeners until touchstart called again
      element.removeEventListener('touchmove', events, false)
      element.removeEventListener('touchend', events, false)

    },
    transitionEnd: function(event) {

      if (parseInt(event.target.getAttribute('data-index'), 10) == index) {

        if (delay) begin();

        options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);

      }

    }

  }

  // trigger setup
  setup();

  // start auto slideshow if applicable
  if (delay) begin();


  // add event listeners
  if (browser.addEventListener) {

    // set touchstart event on element
    if (browser.touch) element.addEventListener('touchstart', events, false);

    if (browser.transitions) {
      element.addEventListener('webkitTransitionEnd', events, false);
      element.addEventListener('msTransitionEnd', events, false);
      element.addEventListener('oTransitionEnd', events, false);
      element.addEventListener('otransitionend', events, false);
      element.addEventListener('transitionend', events, false);
    }

    // set resize event on window
    window.addEventListener('resize', events, false);

  } else {

    window.onresize = function () { setup() }; // to play nice with old IE

  }

  // expose the Swipe API
  return {
    setup: function() {

      setup();

    },
    slide: function(to, speed) {

      // cancel slideshow
      stop();

      slide(to, speed);

    },
    prev: function() {

      // cancel slideshow
      stop();

      prev();

    },
    next: function() {

      // cancel slideshow
      stop();

      next();

    },
    stop: function() {

      // cancel slideshow
      stop();

    },
    getPos: function() {

      // return current index position
      return index;

    },
    getNumSlides: function() {

      // return total number of slides
      return length;
    },
    kill: function() {

      // cancel slideshow
      stop();

      // reset element
      element.style.width = '';
      element.style.left = '';

      // reset slides
      var pos = slides.length;
      while(pos--) {

        var slide = slides[pos];
        slide.style.width = '';
        slide.style.left = '';

        if (browser.transitions) translate(pos, 0, 0);

      }

      // removed event listeners
      if (browser.addEventListener) {

        // remove current event listeners
        element.removeEventListener('touchstart', events, false);
        element.removeEventListener('webkitTransitionEnd', events, false);
        element.removeEventListener('msTransitionEnd', events, false);
        element.removeEventListener('oTransitionEnd', events, false);
        element.removeEventListener('otransitionend', events, false);
        element.removeEventListener('transitionend', events, false);
        window.removeEventListener('resize', events, false);

      }
      else {

        window.onresize = null;

      }

    }
  }

}


if ( window.jQuery || window.Zepto ) {
  (function($) {
    $.fn.Swipe = function(params) {
      return this.each(function() {
        $(this).data('Swipe', new Swipe($(this)[0], params));
      });
    }
  })( window.jQuery || window.Zepto )
}
</script>



<article id="{{product.handle}}" class="product hentry">

<div class="row">
	<div class="col-md-12">
		
		<nav class="breadcrumb" role="navigation" aria-label="breadcrumbs">
		  <a href="/" title="{{ 'general.breadcrumbs.back_home' | t }}">{{ 'general.breadcrumbs.home' | t }}</a>
		
		    {% if collection %}
		      <span aria-hidden="true">&rsaquo;</span>
		      {% if collection.handle %}
		        {% capture url %}/collections/{{ collection.handle }}{% endcapture %}
		        {{ collection.title | link_to: url }}
		      {% endif %}
		    {% endif %}
		    <span aria-hidden="true">&rsaquo;</span>
		    <span>{{ product.title }}</span>
		
		</nav>
		
	</div>
</div>

<div class="row">
	
	<div class="col-md-6 col-sm-6 product-images">
	
	{% if product.compare_at_price_max > product.price %}
		<div class="sale-badge">{{ 'products.general.sale' | t }}</div>
	{% endif %}
		
		<!-- The first image pulled from the product is a large image (480x480), subsequent images are "compact" which is 160x160 -->
		<div id="product_images">
			{% for image in product.images %}
				{% if forloop.first %}
				<!--
					<a href="{{ image | product_img_url: 'original' }}" title="{{ image.alt | escape }}" id="zoom1" class="cloud-zoom" rel="position: 'inside', showTitle: false">
						<img src="{{ image | product_img_url: 'original'}}" alt="{{ image.alt | escape }}" class="product-main-image"/>
					</a>
				-->
					
					{% assign featured_image = product.selected_or_first_available_variant.featured_image | default: product.featured_image %}
					<div class="featured-image-div">
						<img src="{{ featured_image | img_url: 'master' }}" alt="{{ featured_image.alt | escape }}" class="product-main-image" data-pin-no-hover="true" />
					</div>
          <div class="mobiletime">
            
            {% if product.available %}
			<form action="/cart/add" method="post">

				
		 {% if product.variants.size > 1  %}
		        <div id="product-variants">
					<select id="product-select" name='id' class="form-control">
		              {% for variant in product.variants %}
		                <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money }}</option>
		              {% endfor %}
		            </select>
		            
		            
		            
		        </div>

		      {% if product.compare_at_price_max > product.price %}
		      	<h5 class="custom-font compare-at-price">{{ product.compare_at_price_max | money }}</h5>
		      {% endif %}
		      <h3 class="custom-font" id="price-field"></h3>

		      {% else %}
		      <div style="visibility: hidden; height: 1px;">
		            <select id="product-select" name='id' class="form-control">
		                  {% for variant in product.variants %}
		                <option value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money }}</option>
		              {% endfor %}
		            </select>  
		            </div>
		      {% if product.compare_at_price_max > product.price_min %}
		      <h5 class="custom-font compare-at-price">{{ product.compare_at_price_max | money }}</h5>
		      {% endif %}
		      <h3 class="custom-font product-description-header">{{ product.price | money }}</h3>

		      {% endif %}
				
				
				
			    <input type="submit" name="add" value="{{ 'products.product.add_to_cart' | t }}" id="purchase" class="btn btn-success" onclick="pintrk('track', 'addtocart', {value: {{
product.selected_variant.price | money_without_currency}},
order_quantity: 1});" />
			
			</form>
            {% endif %}
            	
          </div>
					
				{% endif %}
			{% endfor %}
			
			{% if product.images.size > 1 %}
			<div class="row">
				<ul id="product-thumbnails">
				{% for image in product.images %}
					<li class="prodthumb col-md---4 col-sm---4{% cycle ' alpha clearcolumn', '', '', ' omega' %}">
						<a href="{{ image | product_img_url: 'original' }}" title="{{ image.alt | escape }}" class="image-swap">
							<img data-pin-no-hover="true" src="{{ image | product_img_url: 'medium'}}" alt="{{ image.alt | escape }}" />
						</a>
					</li>
				{% endfor %}
				</ul>
			</div>
			{% endif %}
			
		</div>
		
		<div id="mobile-product-images">
			
			<div id='slider' class='swipe'>
				<div class='swipe-wrap'>
					{% for image in product.images %}
					<div class="two columns{% cycle ' alpha clearcolumn', '', '', ' omega' %}">
						<img src="{{ image | product_img_url: 'grande'}}" alt="{{ image.alt | escape }}" />
							<div class="swipe-hand">
							{{ 'swipe.png' | asset_url | img_tag }}
							</div>
					</div>
				{% endfor %}
				</div>
  			</div>

		
<!--
		<ul id="product-thumbnails" class="onez">
		{% for image in product.images %}
			<li class="two columns{% cycle ' alpha clearcolumn', '', '', ' omega' %}">
				<img src="{{ image | product_img_url: 'grande'}}" alt="{{ image.alt | escape }}" />
			</li>
		{% endfor %}
		</ul>
-->
          {% if product.available %}
			<form action="/cart/add" method="post">

				
		 {% if product.variants.size > 1  %}
		        <div id="product-variants">
					<select id="product-select" name='id' class="form-control">
		              {% for variant in product.variants %}
		                <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money }}</option>
		              {% endfor %}
		            </select>
		            
		            
		            
		        </div>

		      {% if product.compare_at_price_max > product.price %}
		      	<h5 class="custom-font compare-at-price">{{ product.compare_at_price_max | money }}</h5>
		      {% endif %}
		      <h3 class="custom-font" id="price-field"></h3>

		      {% else %}
		      <div style="visibility: hidden; height: 1px;">
		            <select id="product-select" name='id' class="form-control">
		                  {% for variant in product.variants %}
		                <option value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money }}</option>
		              {% endfor %}
		            </select>  
		            </div>
		      {% if product.compare_at_price_max > product.price_min %}
		      <h5 class="custom-font compare-at-price">{{ product.compare_at_price_max | money }}</h5>
		      {% endif %}
		      <h3 class="custom-font product-description-header">{{ product.price | money }}</h3>

		      {% endif %}
				
				
				
			    <input type="submit" name="add" value="{{ 'products.product.add_to_cart' | t }}" id="purchase" class="btn btn-success" onclick="pintrk('track', 'addtocart', {value: {{
product.selected_variant.price | money_without_currency}},
order_quantity: 1});" />
			
			</form>
			
			
			
			{% else %}
				<div class="product-out-of-stock">{{ 'products.product.sorry_stock' | t }}</div>
			{% endif %}
          
<!--
          <ul id="product-thumbnails" class="twoz">
		{% for image in product.images %}
			<li class="two columns{% cycle ' alpha clearcolumn', '', '', ' omega' %}">
				<img src="{{ image | product_img_url: 'grande'}}" alt="{{ image.alt | escape }}" />
			</li>
		{% endfor %}
		</ul>
-->
		
		
		</div>
	
	</div>
		
	<div class="col-md-6 col-sm-6">
		
	<section class="entry-content">
	
			<h1 class="custom-font product-description-header">{{ product.title }}</h1>
			
			
						
						<div class="product-description-wrapper">
							{{ product.description }}
						</div>
			
			{% if product.available %}
			<form action="/cart/add" method="post">

				
		 {% if product.variants.size > 1  %}
		        <div id="product-variants">
					<select id="product-select" name='id' class="form-control">
		              {% for variant in product.variants %}
		                <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money }}</option>
		              {% endfor %}
		            </select>
		            
		            
		            
		        </div>

		      {% if product.compare_at_price_max > product.price %}
		      	<h5 class="custom-font compare-at-price">{{ product.compare_at_price_max | money }}</h5>
		      {% endif %}
		      <h3 class="custom-font" id="price-field"></h3>

		      {% else %}
		      <div style="visibility: hidden; height: 1px;">
		            <select id="product-select" name='id' class="form-control">
		                  {% for variant in product.variants %}
		                <option value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money }}</option>
		              {% endfor %}
		            </select>  
		            </div>
		      {% if product.compare_at_price_max > product.price_min %}
		      <h5 class="custom-font compare-at-price">{{ product.compare_at_price_max | money }}</h5>
		      {% endif %}
		      <h3 class="custom-font product-description-header">{{ product.price | money }}</h3>

		      {% endif %}
				
				
				
			    <input type="submit" name="add" value="{{ 'products.product.add_to_cart' | t }}" id="purchase" class="btn btn-success" onclick="pintrk('track', 'addtocart', {value: {{
product.selected_variant.price | money_without_currency}},
order_quantity: 1});" />
			
			</form>
			
			
			
			{% else %}
				<div class="product-out-of-stock">{{ 'products.product.sorry_stock' | t }}</div>
			{% endif %}
		
		{% if settings.share_prod_on_twitter or  settings.share_prod_on_facebook or  settings.share_prod_on_pinterest  or  settings.share_prod_on_googleplus %}
		
		{% if template contains 'article' or template contains 'blog' %}
		  {% capture permalinkURL %}{{ shop.url }}{{ article.url }}{% endcapture %}
		  {% capture shareTitle %}{{ article.title }}{% endcapture %}
		
		{% elsif template contains 'product' %}
		  {% capture permalinkURL %}{{ shop.url }}{{ product.url }}{% endcapture %}
		  {% capture shareTitle %}{{ product.title }}{% endcapture %}
		
		{% endif %}

		<div id="sharing" class="social-sharing" data-permalink="{{ permalinkURL }}">

	{% if settings.share_prod_on_facebook %}
	<!-- https://developers.facebook.com/docs/plugins/share-button/ -->
    <a target="_blank" href="//www.facebook.com/sharer.php?u={{ permalinkURL }}" class="share-facebook">
      <span class="icon icon-facebook" aria-hidden="true"></span>
      <span class="share-title">Share</span>
      <span class="share-count">0</span>
    </a>

	{% if settings.share_prod_on_twitter %}
    <!-- https://dev.twitter.com/docs/intents -->
    <a target="_blank" href="//twitter.com/share?url={{ permalinkURL }}&amp;text={{ shareTitle }}" class="share-twitter">
      <span class="icon icon-twitter" aria-hidden="true"></span>
      <span class="share-title">Tweet</span>
      <span class="share-count">0</span>
    </a>
    {% endif %}

	{% if settings.share_prod_on_pinterest %}
    <!--
      https://developers.pinterest.com/pin_it/
      Pinterest get data from the same Open Graph meta tags Facebook uses
    -->
    <a target="_blank" href="//pinterest.com/pin/create/button/?url={{ permalinkURL }}&amp;media={{ product.featured_image | product_img_url: 'original' }}&amp;description={{ product.title | escape }}" class="share-pinterest" data-pin-do="skipLink">
      <span class="icon icon-pinterest" aria-hidden="true"></span>
      <span class="share-title">Pin it</span>
      <span class="share-count">0</span>
    </a>
    {% endif %}    
    
        {% endif %}    
		
		</div>
			
		<div id="fb-root"></div>
		<script>(function(d, s, id) {
		  var js, fjs = d.getElementsByTagName(s)[0];
		  if (d.getElementById(id)) return;
		  js = d.createElement(s); js.id = id;
		  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
		  fjs.parentNode.insertBefore(js, fjs);
		}(document, 'script', 'facebook-jssdk'));</script>

		{% endif %}
		
		{% if settings.show_fb_comments %}
		<div class="fb-comments" data-href="{{ shop.url }}{{ product.url }}" data-num-posts="3"></div>
		{% endif %}
		
		 <div id="shopify-product-reviews" data-id="{{product.id}}">{{ product.metafields.spr.reviews }}</div> 
		
		
		
	</section>
	
	</div>

</div>

</article>

<!--
<script>
	window.mySwipe = Swipe(document.getElementById('slider'));
</script>
-->


